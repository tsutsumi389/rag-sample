# Docker Compose configuration for RAG application vector databases
# Use profiles to start specific services: docker compose --profile <profile> up -d

version: '3.8'

services:
  # Qdrant Vector Database
  # High-performance vector search engine for production use
  # Usage: docker compose --profile qdrant up -d
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: rag-qdrant
    profiles:
      - qdrant
      - all
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - ./docker/qdrant/data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Milvus Vector Database (requires etcd and MinIO)
  # Scalable vector database for large-scale deployments
  # Usage: docker compose --profile milvus up -d
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: rag-milvus-etcd
    profiles:
      - milvus
      - all
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./docker/milvus/data/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: rag-milvus-minio
    profiles:
      - milvus
      - all
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - ./docker/milvus/data/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus:
    image: milvusdb/milvus:v2.3.4
    container_name: rag-milvus
    profiles:
      - milvus
      - all
    depends_on:
      - etcd
      - minio
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    ports:
      - "19530:19530"  # gRPC
      - "9091:9091"    # Metrics
    volumes:
      - ./docker/milvus/data/milvus:/var/lib/milvus
    command: ["milvus", "run", "standalone"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3

  # Weaviate Vector Database
  # GraphQL-based vector database with semantic search
  # Usage: docker compose --profile weaviate up -d
  weaviate:
    image: semitechnologies/weaviate:1.23.7
    container_name: rag-weaviate
    profiles:
      - weaviate
      - all
    ports:
      - "8080:8080"  # HTTP API
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - ./docker/weaviate/data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/v1/.well-known/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

# Volumes for persistent data (optional explicit definition)
volumes:
  qdrant_data:
    driver: local
  milvus_etcd_data:
    driver: local
  milvus_minio_data:
    driver: local
  milvus_data:
    driver: local
  weaviate_data:
    driver: local
